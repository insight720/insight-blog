<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pers.project.blog.mapper.UserAuthMapper">

    <resultMap id="BaseResultMap" type="pers.project.blog.entity.UserAuthEntity">
        <id property="id" column="id" jdbcType="INTEGER"/>
        <result property="userInfoId" column="user_info_id" jdbcType="INTEGER"/>
        <result property="username" column="username" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="loginType" column="login_type" jdbcType="TINYINT"/>
        <result property="ipAddress" column="ip_address" jdbcType="VARCHAR"/>
        <result property="ipSource" column="ip_source" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="BackgroundUserDTOMap" type="pers.project.blog.dto.AdminUserDTO">
        <id property="id" column="id"/>
        <result property="userInfoId" column="user_info_id"/>
        <result property="avatar" column="avatar"/>
        <result property="nickname" column="nickname"/>
        <result property="loginType" column="login_type"/>
        <result property="ipAddress" column="ip_address"/>
        <result property="ipSource" column="ip_source"/>
        <result property="createTime" column="create_time"/>
        <result property="lastLoginTime" column="last_login_time"/>
        <result property="isDisable" column="is_disable"/>
        <collection property="roleList" ofType="pers.project.blog.dto.UserRoleDTO">
            <id property="id" column="role_id"/>
            <result property="roleName" column="role_name"/>
        </collection>
    </resultMap>

    <sql id="Base_Column_List">
        id,user_info_id,username,
        `password`,login_type,ip_address,
        ip_source,create_time,update_time,
        last_login_time
    </sql>

    <select id="countBackgroundUsers" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM tb_user_auth user_auth
        LEFT JOIN tb_user_info user_info on user_auth.user_info_id = user_info.id
        <where>
            <if test="conditionVO.keywords != null">
                user_info.nickname LIKE CONCAT('%', #{conditionVO.keywords}, '%')
            </if>
            <if test="conditionVO.loginType != null">
                AND user_auth.login_type = #{conditionVO.loginType}
            </if>
        </where>
    </select>

    <select id="listBackgroundUserDTOs" resultMap="BackgroundUserDTOMap">
        SELECT
        user_auth.id,
        user_info_id,
        avatar,
        nickname,
        role_id,
        role_name,
        login_type,
        ip_address,
        ip_source,
        user_auth.create_time,
        last_login_time,
        filtered_info.is_disable
        FROM
        (SELECT id, avatar, nickname, is_disable
        FROM tb_user_info user_info
        <where>
            <if test="conditionVO.loginType != null">
                id IN (SELECT user_info_id
                FROM tb_user_auth
                WHERE login_type = #{conditionVO.loginType})
            </if>
            <if test="conditionVO.keywords != null">
                AND nickname LIKE CONCAT('%', #{conditionVO.keywords}, '%')
            </if>
        </where>
        LIMIT #{offset}, #{size}
        ) filtered_info
        LEFT JOIN tb_user_auth user_auth ON filtered_info.id = user_auth.user_info_id
        LEFT JOIN tb_user_role user_role ON filtered_info.id = user_role.user_id
        LEFT JOIN tb_role `role` ON user_role.role_id = `role`.id
    </select>

</mapper>
